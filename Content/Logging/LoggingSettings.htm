<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="1241" MadCap:lastWidth="815">
    <head>
    </head>
    <body>
        <h1>Log Configuration Settings</h1>
        <p>The S3 Service, HyperStore Service, Redis Monitor, Admin Service, Monitoring Data Collector, Monitoring Agent, and CMC each have their own XML-formatted <em>log4j-*.xml.erb</em> configuration template in which you can adjust logging settings. The table above indicates the specific configuration template in which to configure each log type. All of the templates are in <em>/etc/cloudian-&lt;version&gt;-puppet/modules/cloudians3/templates</em> except for the CMC logging template which is in <em>/etc/cloudian-&lt;version&gt;-puppet/modules/cmc/templates</em>.</p>
        <p class="Note" MadCap:autonum="&lt;b&gt;Note &#160;&lt;/b&gt;">After making any configuration file edits, be sure to trigger a Puppet sync-up and then restart the affected service.</p>
        <p>Within a <em>log4j-*.xml.erb</em> file, logs are configured by named instances of <em>RollingRandomAccessFile</em>. The table above indicates the <em>RollingRandomAccessFile</em> name for each log (for example, <em>S3APP</em> for the S3 application log).</p>
        <p>Within a particular log’s <em>RollingRandomAccessFile</em> instance there are these editable settings:</p>
        <ul>
            <li><b>PatternLayout</b> — The log entry format. This flexible formatting configuration is similar to the <em>printf</em> function in C. For detail see <a href="https://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout" target="_blank">PatternLayout</a> from the online Apache Log4j2 documentation.</li>
            <li><b>TimeBasedTriggeringPolicy: interval</b> — Roll the log after this many days pass. Defaults to rolling once a day. (More precisely, the log rolls after this many time units pass, where the time unit is the most granular unit of the date pattern specified within the <em>filePattern</em> element — which in the case of all HyperStore logs' configuration is a day). For more detail see <a href="http://logging.apache.org/log4j/2.x/manual/appenders.html#TriggeringPolicies" target="_blank">Triggering Policies</a> from the online Apache Log4j2 documentation.</li>
            <li><b>SizeBasedTriggeringPolicy: size</b> — Roll the log when it reaches this size.</li>
            <li><b>DefaultRolloverStrategy: max</b> — Maximum number of rolled files to retain. If this number of rolled files is reached, then each time a new rolled file is created the oldest rolled file is deleted. This is the setting to change if you want to keep your rolled logs for a longer (or shorter) period than the HyperStore configured defaults (indicated in the table above). The higher this number is, the longer old rolled files will be kept before being deleted.</li>
        </ul>
        <p class="NoteIndent" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Unlike the other logs, the CMC log (<em>cloudian-ui.log</em>) and Monitoring Agent log (<em>cloudian-agent.log</em>) use an older version of <em>log4j</em> for which the max file size and max files to retain settings are called "MaxFileSize" and "MaxRollFileCount" respectively.</p>
        <p>In the <em>log4j-*.xml.erb</em> files, in addition to <em>RollingRandomAccessFile</em> instances there are also <em>Logger</em> instances. Each <em>Logger</em> instance contains an <em>AppenderRef</em> element that indicates which log that <em>Logger</em> instance applies to, by referencing the log’s <em>RollingRandomAccessFile</em> name (for example <em>AppenderRef ref="S3APP"</em> means that the <em>Logge</em>r instance is associated with the S3 application log). Note that multiple <em>Logger</em> instances may be associated with the same log — this just means that multiple core components of a service (for example, multiple components within the S3 Service) have separately configurable loggers. If you’re uncertain about which <em>Logger</em> instance to edit to achieve your objectives, consult with Cloudian Support.</p>
        <p>The <em>Logger</em> instances are where you can can configure a logging level, using the <em>level</em> attribute:</p>
        <ul>
            <li><b>level</b> — Logging level. The following levels are supported; only events at the configured level and above will be logged:<ul style="list-style-type: circle;"><li>OFF = Turn logging off.</li><li>FATAL = Very severe error events that will cause the application to abort.</li><li>ERROR = Error events that might still allow the application to continue running.</li><li>WARN = Potentially harmful situations.</li><li>INFO = Informational messages that highlight the progress of the application at a course-grained level.</li><li>DEBUG = Fine-grained informational events that are useful for debugging.</li><li>TRACE = Even finer-grained than DEBUG.</li><li>ALL = Log all levels.</li></ul></li>
        </ul>
    </body>
</html>