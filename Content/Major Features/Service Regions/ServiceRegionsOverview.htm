<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="1730" MadCap:lastWidth="815">
    <head>
    </head>
    <body>
        <h1>Service Regions Feature Overview</h1>
        <p>Like Amazon S3, the HyperStore system supports the implementation of multiple "service regions". Setting up the HyperStore system to use multiple service regions is <b>optional</b>.</p>
        <p>The main benefits of deploying multiple service regions are:</p>
        <ul>
            <li>Each region has its own independent HyperStore cluster for S3 object storage. Consequently, deploying multiple regions is another means of scaling out your overall HyperStore service offering (beyond using multiple nodes and multiple datacenters to scale out a single cluster). Note that in a multi-region deployment, entirely different S3 datasets are stored in each region. Each region has its own token space and by default there is no data replication across regions (although there is an option for <a href="../Cross-Region Replication/CrrOverview.htm" target="_popup">cross-region replication</a> on a bucket-to-bucket basis).</li>
            <li>With a multi-region deployment, your service users can choose the service region in which their storage buckets will be created. Users may, for example, choose to store their S3 objects in the region that’s geographically closest to them; or they may choose one region rather than another for reasons of regulatory compliance or corporate policy.</li>
        </ul>
        <p>Note that <b>deploying the HyperStore system in multiple datacenters does not in itself constitute having multiple service regions.</b> You can have multiple datacenters within a single service region.</p>
        <p class="Note" MadCap:autonum="&lt;b&gt;Note &#160;&lt;/b&gt;">HyperStore has been tested successfully with as many as 16 service regions, and as many as 20 data centers in a single service region.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead class="CloudianParentDropDown">
                <MadCap:dropDownHotspot><a name="DefaultRegion"></a>Default Service Region</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>In a HyperStore deployment with multiple service regions, one region serves as the "default region". The default region plays several roles in the context of a multi-region HyperStore system. For example:</p>
                <ul>
                    <li>If service users do not specify a region when they create a new S3 storage bucket, the system will create the bucket in the default region.</li>
                    <li>Even when users do specify a region when creating a new bucket, the incoming <MadCap:xref href="../../S3 API Support/OperationsOnBuckets/PutBucket.htm" target="_popup">PUT Bucket</MadCap:xref> request will typically resolve to the default region, and S3 Service nodes in the default region will then initiate the process of creating the bucket in the requested region.</li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead class="CloudianParentDropDown">
                <MadCap:dropDownHotspot>Single-Region System</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>You may choose not to have multiple service regions. However, even if you have just one region, you still will need to give that region a name when you install your HyperStore system, and the region name will become part of your HyperStore system configuration.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead class="CloudianParentDropDown">
                <MadCap:dropDownHotspot>Multi-Region System Architecture</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>A multi-region HyperStore system has the following characteristics:</p>
                <ul>
                    <li><b>Each region has its own independent object storage cluster</b> and by default there is no object replication across regions (although there is an option for <a href="../Cross-Region Replication/CrrOverview.htm" target="_popup">cross-region replication</a> on a bucket-to-bucket basis).</li>
                    <li><b>User access credentials are valid across the system as a whole</b>. In support of user authentication, a single, uniform Redis Credentials database serves the entire multi-region system. There is just one Redis Credentials master node for the whole system, and that node is located in your default region. Within each region, there is one Redis Credentials slave node per data center.</li>
                    <li><b>Quality of service (QoS) controls are implemented separately in each region</b>. The QoS limits that you establish for a service region will be applied only to user activity in that particular region.</li>
                </ul>
                <div class="Indent">
                    <p>For example, if you have a two-region HyperStore deployment with regions named "North" and "South", you might set your QoS limits in the "North" region so that each user is allowed to store 20GB of data. The 20GB storage cap applies only to user activity in your "North" region. You would also have a separate cap configured for the "South" region. For example, users might also be allowed 20GB of storage in the "South" region (for a total of 40GB per user across the entire HyperStore system); or a different value might be configured for the "South" region such as 10GB or 30GB.</p>
                    <p>In support of QoS implementation, each region has its own independent Redis QoS database. Each regional Redis QoS database has its own master node. In each region there is also one Redis QoS slave node per data center.</p>
                </div>
                <ul>
                    <li>The <b>Redis Monitor application will monitor all the Redis databases in all the regions</b> (and if necessary trigger failover of the Redis master role within each database). One primary Redis Monitor application instance serves the whole multi-region system, and if the primary Redis Monitor instance goes down the backup instance takes over. The primary Redis Monitor instance and backup Redis Monitor instance are on separate nodes in your default region.</li>
                    <li><b>Each CMC instance has access to and control over the entire multi-region system</b>. For more information see Using the CMC for Unified Management of a Multi-Region System.</li>
                    <li><b>Just one Puppet master node is used</b> to propagate system configuration settings throughout the whole multi-region system, during system installation and for ongoing system configuration management.</li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
        <p><b>See Also:</b>
        </p>
        <ul>
            <li>
                <MadCap:xref href="ServiceRegionsSetUp.htm">Setting Up a Multi-Region System</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="../../Introduction/System Diagrams/SystemLevels.htm">System Levels</MadCap:xref> (diagram)</li>
            <li>
                <MadCap:xref href="../../Introduction/System Diagrams/ServicesDistributionMultiRegion.htm">Services Distribution -- Multi-Region</MadCap:xref> (diagram)</li>
        </ul>
    </body>
</html>